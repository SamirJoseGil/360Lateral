# ==============================================
# üê≥ DOCKER COMPOSE - LATERAL 360¬∞
# ==============================================

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: lateral360_db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-lateral360_password}
      - POSTGRES_USER=${DB_USER:-lateral360_user}
      - POSTGRES_DB=${DB_NAME:-lateral360_db}
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-lateral360_user} -d ${DB_NAME:-lateral360_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - lateral360_network

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: lateral360_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - lateral360_network

  # Backend Django
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
      target: development
    container_name: lateral360_backend
    restart: unless-stopped
    volumes:
      - ./Backend:/app:cached
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DOCKER_ENV=true
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-lateral360_db}
      - DB_USER=${DB_USER:-lateral360_user}
      - DB_PASSWORD=${DB_PASSWORD:-lateral360_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=config.settings
      - DJANGO_ENV=development
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0,lateral360_backend
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@lateral360.com}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-admin123}
      - CREATE_ADDITIONAL_USERS=${CREATE_ADDITIONAL_USERS:-false}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lateral360_network

  # Frontend Remix
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      target: development
    container_name: lateral360_frontend
    restart: unless-stopped
    volumes:
      - ./Frontend:/app:cached
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      # ‚úÖ CR√çTICO: Variables de API - usar nombre del servicio Docker
      - BACKEND_URL=http://backend:8000
      - API_URL=http://backend:8000
      - BACKEND_HOST=backend
      - BACKEND_PORT=8000
      # Para el navegador (cliente)
      - VITE_API_URL=http://localhost:8000
      # Session
      - SESSION_SECRET=${SESSION_SECRET:-your-secret-key-here-change-in-production}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lateral360_network

# Vol√∫menes persistentes
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

# Red personalizada
networks:
  lateral360_network:
    driver: bridge