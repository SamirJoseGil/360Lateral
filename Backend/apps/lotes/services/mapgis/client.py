"""
Cliente para interactuar con la API de MapGIS de Medell√≠n.
Este m√≥dulo maneja la comunicaci√≥n de bajo nivel con la API.
"""

import requests
import logging
import time
import json
from typing import Dict, Any, Optional
from django.conf import settings

# Configuraci√≥n del logger
logger = logging.getLogger(__name__)

class MapGISClient:
    """
    Cliente para interactuar con la API de MapGIS de Medell√≠n.
    Gestiona la sesi√≥n, autenticaci√≥n y comunicaci√≥n con los endpoints.
    """
    
    # URLs y endpoints actualizados seg√∫n la estructura real de MapGIS
    BASE_URL = "https://www.medellin.gov.co"
    MAPGIS_URL = f"{BASE_URL}/mapgis9/mapa.jsp?aplicacion=41"
    SESSION_VALIDATION_URL = f"{BASE_URL}/mapgis_seg/ValidarSessionMapgis.do"
    LOAD_PARAMS_URL = f"{BASE_URL}/site_consulta_pot/cargarParametrosVistaPot.hyg"
    CONSULTA_URL = f"{BASE_URL}/site_consulta_pot/consultas.hyg"
    
    def __init__(self):
        """Inicializa el cliente con una sesi√≥n nueva."""
        # Timeout y reintentos
        self.TIMEOUT = getattr(settings, 'MAPGIS_TIMEOUT', 30)
        self.RETRY_ATTEMPTS = getattr(settings, 'MAPGIS_RETRY_ATTEMPTS', 3)
        
        self.session = requests.Session()
        self.session_initialized = False
        self.authenticated = False
        
        # Headers espec√≠ficos basados en la investigaci√≥n
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/javascript, */*; q=0.01',
            'Accept-Language': 'es-ES,es;q=0.9,pt;q=0.8',
            'Connection': 'keep-alive',
            'X-Requested-With': 'XMLHttpRequest',
            'Origin': 'https://www.medellin.gov.co',
            'Referer': 'https://www.medellin.gov.co/site_consulta_pot/ConsultaPot.hyg',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
        }
        
        logger.debug("Cliente MapGIS inicializado")
    
    def initialize_session(self) -> bool:
        """
        Inicializa la sesi√≥n con MapGIS - Proceso completo de autenticaci√≥n.
        Returns:
            bool: True si la sesi√≥n se inicializ√≥ correctamente, False en caso contrario
        """
        try:
            if self.session_initialized:
                return True
                
            logger.info("üîß Inicializando sesi√≥n con MapGIS Medell√≠n")
            
            # Paso 1: Acceder a la p√°gina principal de MapGIS
            logger.debug("Paso 1: Accediendo a la p√°gina principal de MapGIS")
            resp = self.session.get(
                self.MAPGIS_URL, 
                headers=self.headers, 
                timeout=self.TIMEOUT
            )
            
            if resp.status_code != 200:
                logger.error(f"‚ùå Error accediendo a MapGIS: {resp.status_code}")
                return False
                
            logger.debug(f"Cookies iniciales: {len(self.session.cookies)}")
            
            # Paso 2: Cargar par√°metros de vista POT
            logger.debug("Paso 2: Cargando par√°metros de vista POT")
            resp = self.session.post(
                self.LOAD_PARAMS_URL,
                headers=self.headers,
                timeout=self.TIMEOUT
            )
            
            if resp.status_code != 200:
                logger.error(f"‚ùå Error cargando par√°metros POT: {resp.status_code}")
                return False
                
            # Extraer datos de configuraci√≥n
            try:
                config_data = resp.json()
                logger.debug(f"Configuraci√≥n recibida: {len(config_data)} par√°metros")
            except Exception as e:
                logger.warning(f"No se pudo procesar la configuraci√≥n: {str(e)}")
            
            # Paso 3: Validar sesi√≥n en MapGIS
            logger.debug("Paso 3: Validando sesi√≥n en MapGIS")
            validation_headers = self.headers.copy()
            validation_headers['Content-Type'] = 'application/x-www-form-urlencoded'
            
            resp = self.session.post(
                self.SESSION_VALIDATION_URL,
                headers=validation_headers,
                data="",  # El endpoint no requiere datos espec√≠ficos
                timeout=self.TIMEOUT
            )
            
            if resp.status_code != 200:
                logger.error(f"‚ùå Error validando sesi√≥n: {resp.status_code}")
                return False
                
            logger.info(f"‚úÖ Sesi√≥n inicializada correctamente - Cookies: {len(self.session.cookies)}")
            self.session_initialized = True
            self.authenticated = True
            return True
                
        except Exception as e:
            logger.error(f"‚ùå Error inicializando sesi√≥n: {str(e)}")
            return False

    def query(self, cbml: str, query_type: str, fields: str) -> Dict[str, Any]:
        """
        Realiza una consulta a la API de MapGIS.
        
        Args:
            cbml: C√≥digo CBML del lote
            query_type: Tipo de consulta (Ej: SQL_CONSULTA_CLASIFICACIONSUELO)
            fields: Campos a consultar (Ej: CLASE_SUELO)
        
        Returns:
            Dict: Respuesta de la API
        
        Raises:
            ConnectionError: Si hay problemas con la conexi√≥n
            ValueError: Si la respuesta no tiene el formato esperado
        """
        if not self.session_initialized and not self.initialize_session():
            logger.error("üö´ No se pudo inicializar la sesi√≥n con MapGIS")
            raise ConnectionError("No se pudo inicializar la sesi√≥n con MapGIS")
            
        try:
            # Preparar URL con par√°metros
            params = {
                'cbml': cbml,
                'consulta': query_type,
                'campos': fields
            }
            
            # Realizar la petici√≥n
            logger.info(f"üåê Enviando consulta {query_type} para CBML {cbml} a {self.CONSULTA_URL}")
            logger.debug(f"üì¶ Par√°metros: {params}")
            logger.debug(f"üìù Headers: {self.headers}")
            
            start_time = time.time()
            resp = self.session.post(
                self.CONSULTA_URL,
                params=params,
                headers=self.headers,
                timeout=self.TIMEOUT
            )
            duration = time.time() - start_time
            
            # Log detallado de la respuesta
            logger.info(f"üì° Respuesta recibida en {duration:.2f}s - Status: {resp.status_code}")
            
            # Validar respuesta
            if resp.status_code != 200:
                logger.error(f"üö´ Error en consulta HTTP: {resp.status_code}")
                logger.debug(f"üö´ Cuerpo de error: {resp.text[:500]}")
                raise ConnectionError(f"Error en consulta: {resp.status_code}")
                
            # Procesar respuesta como JSON
            try:
                # Log del contenido de la respuesta para depuraci√≥n
                content_preview = resp.text[:1000] + ("..." if len(resp.text) > 1000 else "")
                logger.debug(f"üìÑ Contenido de la respuesta: {content_preview}")
                
                data = resp.json()
                
                # Log de estructura de datos recibida
                if 'resultados' in data:
                    num_resultados = len(data['resultados'])
                    logger.info(f"‚úÖ Datos JSON recibidos: {num_resultados} conjuntos de resultados")
                    
                    # Verificar si hay resultados
                    if num_resultados > 0 and data['resultados'][0]:
                        primer_conjunto = data['resultados'][0]
                        if isinstance(primer_conjunto, list):
                            logger.info(f"‚úÖ Primer conjunto tiene {len(primer_conjunto)} elementos")
                            # Mostrar una muestra de los datos
                            if len(primer_conjunto) > 0:
                                logger.info(f"üìä Muestra de datos: {primer_conjunto[0]}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Formato inesperado del primer conjunto de resultados: {type(primer_conjunto)}")
                else:
                    logger.warning(f"‚ö†Ô∏è No se encontr√≥ la clave 'resultados' en la respuesta")
                
                return data
            except json.JSONDecodeError as e:
                logger.error(f"üö´ Error decodificando JSON: {str(e)}")
                logger.error(f"üö´ Contenido que caus√≥ el error: {resp.text[:500]}")
                raise ValueError(f"Formato de respuesta inv√°lido: {resp.text[:100]}...")
                
        except (requests.RequestException, ConnectionError) as e:
            logger.error(f"üö´ Error en consulta MapGIS: {str(e)}")
            raise ConnectionError(f"Error en comunicaci√≥n con MapGIS: {str(e)}")
        except Exception as e:
            logger.error(f"üö´ Error inesperado: {str(e)}")
            logger.exception("Excepci√≥n detallada:")
            raise
    
    def health_check(self) -> Dict[str, Any]:
        """
        Verifica el estado de la conexi√≥n con MapGIS.
        
        Returns:
            Dict: Estado de la conexi√≥n
        """
        start_time = time.time()
        
        try:
            # Intentar inicializar sesi√≥n
            session_ok = self.initialize_session()
            
            if session_ok:
                # Verificar si podemos hacer una consulta simple
                test_cbml = "14220250006"  # CBML de prueba
                try:
                    self.query(
                        test_cbml, 
                        'SQL_CONSULTA_CLASIFICACIONSUELO',
                        'Clasificaci√≥n del suelo'
                    )
                    consulta_ok = True
                except Exception:
                    consulta_ok = False
                
                return {
                    'service': 'MapGIS',
                    'status': 'healthy' if consulta_ok else 'partial',
                    'response_time': round(time.time() - start_time, 2),
                    'authenticated': self.authenticated,
                    'session_active': self.session_initialized
                }
            else:
                return {
                    'service': 'MapGIS',
                    'status': 'unhealthy',
                    'response_time': round(time.time() - start_time, 2),
                    'authenticated': False,
                    'session_active': False,
                    'error': 'No se pudo inicializar sesi√≥n'
                }
        
        except Exception as e:
            logger.error(f"Error en health check: {str(e)}")
            return {
                'service': 'MapGIS',
                'status': 'error',
                'response_time': round(time.time() - start_time, 2),
                'error': str(e)
            }