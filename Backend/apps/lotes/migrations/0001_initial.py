# Generated by Django 4.2.7 on 2025-10-07 21:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Tratamiento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código único del tratamiento (ej: CN1)",
                        max_length=10,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        choices=[
                            ("CN1", "Consolidación Nivel 1"),
                            ("CN2", "Consolidación Nivel 2"),
                            ("CN3", "Consolidación Nivel 3"),
                            ("CN4", "Consolidación Nivel 4"),
                            ("CN5", "Consolidación Nivel 5"),
                            ("RU", "Redesarrollo"),
                            ("D", "Desarrollo"),
                            ("C", "Conservación"),
                        ],
                        help_text="Nombre del tratamiento",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada del tratamiento",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "indice_ocupacion",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Relación área ocupada / área del lote (0-1)",
                        max_digits=3,
                        null=True,
                        verbose_name="Índice de ocupación",
                    ),
                ),
                (
                    "indice_construccion",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Relación área construida / área del lote",
                        max_digits=3,
                        null=True,
                        verbose_name="Índice de construcción",
                    ),
                ),
                (
                    "altura_maxima",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Número máximo de pisos permitidos",
                        null=True,
                        verbose_name="Altura máxima (pisos)",
                    ),
                ),
                (
                    "retiro_frontal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        verbose_name="Retiro frontal (m)",
                    ),
                ),
                (
                    "retiro_lateral",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        verbose_name="Retiro lateral (m)",
                    ),
                ),
                (
                    "retiro_posterior",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        verbose_name="Retiro posterior (m)",
                    ),
                ),
                (
                    "detalles",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Otros detalles específicos del tratamiento",
                        verbose_name="Detalles adicionales",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Última actualización"
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si este tratamiento sigue vigente",
                        verbose_name="Activo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tratamiento Urbanístico",
                "verbose_name_plural": "Tratamientos Urbanísticos",
                "ordering": ["codigo"],
            },
        ),
        migrations.CreateModel(
            name="Lote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre o identificador del lote",
                        max_length=255,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "cbml",
                    models.CharField(
                        blank=True,
                        help_text="Código de Bien de Medellín",
                        max_length=50,
                        null=True,
                        verbose_name="CBML",
                    ),
                ),
                (
                    "direccion",
                    models.CharField(
                        blank=True,
                        help_text="Dirección física del lote",
                        max_length=255,
                        null=True,
                        verbose_name="Dirección",
                    ),
                ),
                (
                    "area",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Área del terreno en metros cuadrados",
                        max_digits=12,
                        null=True,
                        verbose_name="Área (m²)",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada del lote",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "matricula",
                    models.CharField(
                        blank=True,
                        help_text="Número de matrícula inmobiliaria",
                        max_length=50,
                        null=True,
                        verbose_name="Matrícula inmobiliaria",
                    ),
                ),
                (
                    "barrio",
                    models.CharField(
                        blank=True,
                        help_text="Barrio donde se ubica el lote",
                        max_length=100,
                        null=True,
                        verbose_name="Barrio",
                    ),
                ),
                (
                    "estrato",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Estrato socioeconómico (1-6)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(6),
                        ],
                        verbose_name="Estrato",
                    ),
                ),
                (
                    "codigo_catastral",
                    models.CharField(
                        blank=True,
                        help_text="Código catastral del predio",
                        max_length=100,
                        null=True,
                        verbose_name="Código Catastral",
                    ),
                ),
                (
                    "latitud",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Coordenada de latitud del lote",
                        max_digits=10,
                        null=True,
                        verbose_name="Latitud",
                    ),
                ),
                (
                    "longitud",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Coordenada de longitud del lote",
                        max_digits=10,
                        null=True,
                        verbose_name="Longitud",
                    ),
                ),
                (
                    "tratamiento_pot",
                    models.CharField(
                        blank=True,
                        help_text="Tratamiento según Plan de Ordenamiento Territorial",
                        max_length=100,
                        null=True,
                        verbose_name="Tratamiento POT",
                    ),
                ),
                (
                    "uso_suelo",
                    models.CharField(
                        blank=True,
                        help_text="Clasificación del uso del suelo",
                        max_length=100,
                        null=True,
                        verbose_name="Uso del Suelo",
                    ),
                ),
                (
                    "clasificacion_suelo",
                    models.CharField(
                        blank=True,
                        help_text="Clasificación del suelo (urbano, rural, etc.)",
                        max_length=100,
                        null=True,
                        verbose_name="Clasificación del Suelo",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de actualización"
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("active", "Activo"),
                            ("inactive", "Inactivo"),
                            ("archived", "Archivado"),
                            ("in_process", "En proceso"),
                            ("completed", "Completado"),
                        ],
                        default="active",
                        help_text="Estado actual del lote (status)",
                        max_length=50,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el lote ha sido verificado por un administrador",
                    ),
                ),
                (
                    "verified_at",
                    models.DateTimeField(
                        blank=True, help_text="Fecha y hora de verificación", null=True
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True,
                        help_text="Razón de rechazo si el estado es rejected",
                        null=True,
                    ),
                ),
                (
                    "metadatos",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Información adicional en formato JSON",
                        verbose_name="Metadatos adicionales",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lotes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario propietario",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Administrador que verificó el lote",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lotes_verificados",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lote",
                "verbose_name_plural": "Lotes",
                "ordering": ["-fecha_creacion"],
            },
        ),
        migrations.CreateModel(
            name="Favorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notas",
                    models.TextField(
                        blank=True,
                        help_text="Notas personales sobre el lote",
                        null=True,
                    ),
                ),
                (
                    "lote",
                    models.ForeignKey(
                        help_text="Lote marcado como favorito",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favoritos",
                        to="lotes.lote",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        help_text="Usuario que marcó el lote como favorito",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lotes_favoritos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lote Favorito",
                "verbose_name_plural": "Lotes Favoritos",
                "db_table": "lotes_favoritos",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TratamientoNormativaLote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo_vivienda",
                    models.CharField(
                        choices=[
                            ("unifamiliar", "Unifamiliar"),
                            (
                                "bifamiliar_pisos_diferentes",
                                "Bifamiliar en pisos diferentes",
                            ),
                            ("bifamiliar_mismo_piso", "Bifamiliar en el mismo piso"),
                            ("trifamiliar", "Trifamiliar"),
                            ("multifamiliar", "Multifamiliar"),
                        ],
                        max_length=30,
                        verbose_name="Tipo de vivienda",
                    ),
                ),
                (
                    "frente_minimo",
                    models.DecimalField(
                        decimal_places=2, max_digits=5, verbose_name="Frente mínimo (m)"
                    ),
                ),
                (
                    "area_minima",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Área mínima (m²)"
                    ),
                ),
                (
                    "tratamiento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="normativas_lote",
                        to="lotes.tratamiento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Normativa de Lote por Tratamiento",
                "verbose_name_plural": "Normativas de Lotes por Tratamiento",
                "ordering": ["tratamiento", "tipo_vivienda"],
                "unique_together": {("tratamiento", "tipo_vivienda")},
            },
        ),
        migrations.CreateModel(
            name="TratamientoAreaMinimaVivienda",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo_vivienda",
                    models.CharField(
                        choices=[
                            ("1_alcoba", "1 Alcoba"),
                            ("2_alcobas", "2 Alcobas"),
                            ("3_alcobas_vip", "3 Alcobas VIP"),
                            ("3_alcobas_vis", "3 Alcobas VIS"),
                            ("4_alcobas_vip", "4 Alcobas VIP"),
                            ("4_alcobas_vis", "4 Alcobas VIS"),
                        ],
                        max_length=30,
                        verbose_name="Tipo de vivienda",
                    ),
                ),
                (
                    "area_minima",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Área mínima (m²)"
                    ),
                ),
                (
                    "tratamiento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="areas_minimas_vivienda",
                        to="lotes.tratamiento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Área Mínima de Vivienda por Tratamiento",
                "verbose_name_plural": "Áreas Mínimas de Vivienda por Tratamiento",
                "ordering": ["tratamiento", "tipo_vivienda"],
                "unique_together": {("tratamiento", "tipo_vivienda")},
            },
        ),
        migrations.AddIndex(
            model_name="lote",
            index=models.Index(
                fields=["usuario", "estado"], name="lotes_lote_usuario_408738_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lote",
            index=models.Index(
                fields=["is_verified"], name="lotes_lote_is_veri_e94fb0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lote",
            index=models.Index(fields=["cbml"], name="lotes_lote_cbml_e1df01_idx"),
        ),
        migrations.AddIndex(
            model_name="lote",
            index=models.Index(
                fields=["fecha_creacion"], name="lotes_lote_fecha_c_d465ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="favorite",
            index=models.Index(
                fields=["usuario", "created_at"], name="lotes_favor_usuario_1cbe49_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="favorite",
            index=models.Index(
                fields=["lote", "created_at"], name="lotes_favor_lote_id_726148_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="favorite",
            unique_together={("usuario", "lote")},
        ),
    ]
