# Generated by Django 4.2.7 on 2025-10-20 02:53

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='Email')),
                ('username', models.CharField(db_index=True, max_length=150, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(max_length=150, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=150, verbose_name='Apellido')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Teléfono')),
                ('company', models.CharField(blank=True, max_length=200, null=True, verbose_name='Empresa')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('owner', 'Property Owner'), ('developer', 'Developer')], db_index=True, default='owner', max_length=20, verbose_name='Rol')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Email Verificado')),
                ('document_type', models.CharField(blank=True, choices=[('CC', 'Cédula de Ciudadanía'), ('NIT', 'NIT'), ('CE', 'Cédula de Extranjería'), ('PASSPORT', 'Pasaporte'), ('TI', 'Tarjeta de Identidad')], max_length=20, null=True, verbose_name='Tipo de Documento')),
                ('document_number', models.CharField(blank=True, db_index=True, max_length=50, null=True, verbose_name='Número de Documento')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Dirección de Residencia')),
                ('id_verification_file', models.FileField(blank=True, null=True, upload_to='documents/id_verification/', verbose_name='Archivo de Verificación de Identidad')),
                ('lots_count', models.PositiveIntegerField(default=0, verbose_name='Cantidad de Lotes')),
                ('company_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nombre de la Empresa')),
                ('company_nit', models.CharField(blank=True, max_length=50, null=True, verbose_name='NIT de la Empresa')),
                ('position', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cargo')),
                ('experience_years', models.PositiveIntegerField(blank=True, null=True, verbose_name='Años de Experiencia')),
                ('portfolio_url', models.URLField(blank=True, null=True, verbose_name='URL del Portafolio')),
                ('focus_area', models.CharField(blank=True, choices=[('residential', 'Residencial'), ('commercial', 'Comercial'), ('mixed', 'Mixto'), ('vis', 'VIS (Vivienda de Interés Social)'), ('industrial', 'Industrial'), ('other', 'Otro')], max_length=50, null=True, verbose_name='Área de Enfoque')),
                ('department', models.CharField(blank=True, choices=[('normativa', 'Normativa'), ('soporte_tecnico', 'Soporte Técnico'), ('gestion_usuarios', 'Gestión de Usuarios'), ('desarrollo', 'Desarrollo'), ('comercial', 'Comercial'), ('legal', 'Legal'), ('general', 'General')], max_length=100, null=True, verbose_name='Departamento')),
                ('permissions_scope', models.CharField(blank=True, choices=[('full', 'Administrador Completo'), ('limited', 'Administrador Limitado'), ('readonly', 'Solo Lectura'), ('department', 'Solo Departamento')], default='limited', max_length=20, null=True, verbose_name='Alcance de Permisos')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'users_user',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, max_length=500, null=True, verbose_name='Biografía')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Sitio Web')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='LinkedIn')),
                ('location', models.CharField(blank=True, max_length=200, null=True, verbose_name='Ubicación')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificaciones por Email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notificaciones por SMS')),
                ('language', models.CharField(choices=[('es', 'Español'), ('en', 'English')], default='es', max_length=10, verbose_name='Idioma')),
                ('timezone', models.CharField(default='America/Bogota', max_length=50, verbose_name='Zona Horaria')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Perfil de Usuario',
                'verbose_name_plural': 'Perfiles de Usuario',
                'db_table': 'users_userprofile',
            },
        ),
        migrations.CreateModel(
            name='UserRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('access', 'Solicitud de Acceso'), ('feature', 'Solicitud de Característica'), ('support', 'Solicitud de Soporte'), ('developer', 'Aplicación de Desarrollador'), ('project', 'Solicitud de Proyecto'), ('other', 'Otro')], db_index=True, default='other', max_length=50, verbose_name='Tipo de Solicitud')),
                ('title', models.CharField(max_length=255, verbose_name='Título')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('in_review', 'En Revisión'), ('approved', 'Aprobado'), ('rejected', 'Rechazado'), ('completed', 'Completado')], db_index=True, default='pending', max_length=20, verbose_name='Estado')),
                ('reference_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID de Referencia')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadatos')),
                ('review_notes', models.TextField(blank=True, null=True, verbose_name='Notas de Revisión')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to=settings.AUTH_USER_MODEL, verbose_name='Revisor')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Solicitud de Usuario',
                'verbose_name_plural': 'Solicitudes de Usuario',
                'db_table': 'users_userrequest',
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='users_userr_user_id_6fbc51_idx'), models.Index(fields=['request_type', 'status'], name='users_userr_request_76d08d_idx'), models.Index(fields=['-updated_at'], name='users_userr_updated_8b7d15_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='users_user_usernam_65d164_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_user_role_36d76d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
    ]
